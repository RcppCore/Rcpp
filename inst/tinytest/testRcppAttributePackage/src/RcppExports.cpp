// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/testRcppAttributePackage.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// test_no_attributes
List test_no_attributes(List x, bool verbose);
static SEXP _testRcppAttributePackage_test_no_attributes_try(SEXP xSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(test_no_attributes(x, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _testRcppAttributePackage_test_no_attributes(SEXP xSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_testRcppAttributePackage_test_no_attributes_try(xSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// test_signature
List test_signature(List x, bool verbose);
static SEXP _testRcppAttributePackage_test_signature_try(SEXP xSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(test_signature(x, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _testRcppAttributePackage_test_signature(SEXP xSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_testRcppAttributePackage_test_signature_try(xSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// test_rng_false_signature_invisible_true
List test_rng_false_signature_invisible_true(List x, bool verbose);
static SEXP _testRcppAttributePackage_test_rng_false_signature_invisible_true_try(SEXP xSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(test_rng_false_signature_invisible_true(x, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _testRcppAttributePackage_test_rng_false_signature_invisible_true(SEXP xSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_testRcppAttributePackage_test_rng_false_signature_invisible_true_try(xSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// test_rng_false
List test_rng_false(List x, bool verbose);
static SEXP _testRcppAttributePackage_test_rng_false_try(SEXP xSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(test_rng_false(x, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _testRcppAttributePackage_test_rng_false(SEXP xSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_testRcppAttributePackage_test_rng_false_try(xSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// test_rng_true
List test_rng_true(List x, bool verbose);
static SEXP _testRcppAttributePackage_test_rng_true_try(SEXP xSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(test_rng_true(x, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _testRcppAttributePackage_test_rng_true(SEXP xSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_testRcppAttributePackage_test_rng_true_try(xSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// test_rng_true_signature
List test_rng_true_signature(List x, bool verbose);
static SEXP _testRcppAttributePackage_test_rng_true_signature_try(SEXP xSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(test_rng_true_signature(x, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _testRcppAttributePackage_test_rng_true_signature(SEXP xSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_testRcppAttributePackage_test_rng_true_signature_try(xSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// test_invisible_true_rng_true
List test_invisible_true_rng_true(List x, bool verbose);
static SEXP _testRcppAttributePackage_test_invisible_true_rng_true_try(SEXP xSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(test_invisible_true_rng_true(x, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _testRcppAttributePackage_test_invisible_true_rng_true(SEXP xSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_testRcppAttributePackage_test_invisible_true_rng_true_try(xSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// test_invisible_true
List test_invisible_true(List x, bool verbose);
static SEXP _testRcppAttributePackage_test_invisible_true_try(SEXP xSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(test_invisible_true(x, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _testRcppAttributePackage_test_invisible_true(SEXP xSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_testRcppAttributePackage_test_invisible_true_try(xSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// test_invisible_true_signature
List test_invisible_true_signature(List x, bool verbose);
static SEXP _testRcppAttributePackage_test_invisible_true_signature_try(SEXP xSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(test_invisible_true_signature(x, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _testRcppAttributePackage_test_invisible_true_signature(SEXP xSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_testRcppAttributePackage_test_invisible_true_signature_try(xSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _testRcppAttributePackage_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("List(*test_no_attributes)(List,bool)");
        signatures.insert("List(*test_signature)(List,bool)");
        signatures.insert("List(*test_rng_false_signature_invisible_true)(List,bool)");
        signatures.insert("List(*test_rng_false)(List,bool)");
        signatures.insert("List(*test_rng_true)(List,bool)");
        signatures.insert("List(*test_rng_true_signature)(List,bool)");
        signatures.insert("List(*test_invisible_true_rng_true)(List,bool)");
        signatures.insert("List(*test_invisible_true)(List,bool)");
        signatures.insert("List(*test_invisible_true_signature)(List,bool)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _testRcppAttributePackage_RcppExport_registerCCallable() { 
    R_RegisterCCallable("testRcppAttributePackage", "_testRcppAttributePackage_test_no_attributes", (DL_FUNC)_testRcppAttributePackage_test_no_attributes_try);
    R_RegisterCCallable("testRcppAttributePackage", "_testRcppAttributePackage_test_signature", (DL_FUNC)_testRcppAttributePackage_test_signature_try);
    R_RegisterCCallable("testRcppAttributePackage", "_testRcppAttributePackage_test_rng_false_signature_invisible_true", (DL_FUNC)_testRcppAttributePackage_test_rng_false_signature_invisible_true_try);
    R_RegisterCCallable("testRcppAttributePackage", "_testRcppAttributePackage_test_rng_false", (DL_FUNC)_testRcppAttributePackage_test_rng_false_try);
    R_RegisterCCallable("testRcppAttributePackage", "_testRcppAttributePackage_test_rng_true", (DL_FUNC)_testRcppAttributePackage_test_rng_true_try);
    R_RegisterCCallable("testRcppAttributePackage", "_testRcppAttributePackage_test_rng_true_signature", (DL_FUNC)_testRcppAttributePackage_test_rng_true_signature_try);
    R_RegisterCCallable("testRcppAttributePackage", "_testRcppAttributePackage_test_invisible_true_rng_true", (DL_FUNC)_testRcppAttributePackage_test_invisible_true_rng_true_try);
    R_RegisterCCallable("testRcppAttributePackage", "_testRcppAttributePackage_test_invisible_true", (DL_FUNC)_testRcppAttributePackage_test_invisible_true_try);
    R_RegisterCCallable("testRcppAttributePackage", "_testRcppAttributePackage_test_invisible_true_signature", (DL_FUNC)_testRcppAttributePackage_test_invisible_true_signature_try);
    R_RegisterCCallable("testRcppAttributePackage", "_testRcppAttributePackage_RcppExport_validate", (DL_FUNC)_testRcppAttributePackage_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_testRcppAttributePackage_test_no_attributes", (DL_FUNC) &_testRcppAttributePackage_test_no_attributes, 2},
    {"_testRcppAttributePackage_test_signature", (DL_FUNC) &_testRcppAttributePackage_test_signature, 2},
    {"_testRcppAttributePackage_test_rng_false_signature_invisible_true", (DL_FUNC) &_testRcppAttributePackage_test_rng_false_signature_invisible_true, 2},
    {"_testRcppAttributePackage_test_rng_false", (DL_FUNC) &_testRcppAttributePackage_test_rng_false, 2},
    {"_testRcppAttributePackage_test_rng_true", (DL_FUNC) &_testRcppAttributePackage_test_rng_true, 2},
    {"_testRcppAttributePackage_test_rng_true_signature", (DL_FUNC) &_testRcppAttributePackage_test_rng_true_signature, 2},
    {"_testRcppAttributePackage_test_invisible_true_rng_true", (DL_FUNC) &_testRcppAttributePackage_test_invisible_true_rng_true, 2},
    {"_testRcppAttributePackage_test_invisible_true", (DL_FUNC) &_testRcppAttributePackage_test_invisible_true, 2},
    {"_testRcppAttributePackage_test_invisible_true_signature", (DL_FUNC) &_testRcppAttributePackage_test_invisible_true_signature, 2},
    {"_testRcppAttributePackage_RcppExport_registerCCallable", (DL_FUNC) &_testRcppAttributePackage_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_testRcppAttributePackage(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
