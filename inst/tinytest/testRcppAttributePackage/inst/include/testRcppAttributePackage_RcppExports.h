// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_testRcppAttributePackage_RCPPEXPORTS_H_GEN_
#define RCPP_testRcppAttributePackage_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace testRcppAttributePackage {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("testRcppAttributePackage", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("testRcppAttributePackage", "_testRcppAttributePackage_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in testRcppAttributePackage");
            }
        }
    }

    inline List test_no_attributes(List x, bool verbose) {
        typedef SEXP(*Ptr_test_no_attributes)(SEXP,SEXP);
        static Ptr_test_no_attributes p_test_no_attributes = NULL;
        if (p_test_no_attributes == NULL) {
            validateSignature("List(*test_no_attributes)(List,bool)");
            p_test_no_attributes = (Ptr_test_no_attributes)R_GetCCallable("testRcppAttributePackage", "_testRcppAttributePackage_test_no_attributes");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_test_no_attributes(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List test_signature(List x, bool verbose) {
        typedef SEXP(*Ptr_test_signature)(SEXP,SEXP);
        static Ptr_test_signature p_test_signature = NULL;
        if (p_test_signature == NULL) {
            validateSignature("List(*test_signature)(List,bool)");
            p_test_signature = (Ptr_test_signature)R_GetCCallable("testRcppAttributePackage", "_testRcppAttributePackage_test_signature");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_test_signature(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List test_rng_false_signature_invisible_true(List x, bool verbose) {
        typedef SEXP(*Ptr_test_rng_false_signature_invisible_true)(SEXP,SEXP);
        static Ptr_test_rng_false_signature_invisible_true p_test_rng_false_signature_invisible_true = NULL;
        if (p_test_rng_false_signature_invisible_true == NULL) {
            validateSignature("List(*test_rng_false_signature_invisible_true)(List,bool)");
            p_test_rng_false_signature_invisible_true = (Ptr_test_rng_false_signature_invisible_true)R_GetCCallable("testRcppAttributePackage", "_testRcppAttributePackage_test_rng_false_signature_invisible_true");
        }
        RObject rcpp_result_gen;
        {
            rcpp_result_gen = p_test_rng_false_signature_invisible_true(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List test_rng_false(List x, bool verbose) {
        typedef SEXP(*Ptr_test_rng_false)(SEXP,SEXP);
        static Ptr_test_rng_false p_test_rng_false = NULL;
        if (p_test_rng_false == NULL) {
            validateSignature("List(*test_rng_false)(List,bool)");
            p_test_rng_false = (Ptr_test_rng_false)R_GetCCallable("testRcppAttributePackage", "_testRcppAttributePackage_test_rng_false");
        }
        RObject rcpp_result_gen;
        {
            rcpp_result_gen = p_test_rng_false(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List test_rng_true(List x, bool verbose) {
        typedef SEXP(*Ptr_test_rng_true)(SEXP,SEXP);
        static Ptr_test_rng_true p_test_rng_true = NULL;
        if (p_test_rng_true == NULL) {
            validateSignature("List(*test_rng_true)(List,bool)");
            p_test_rng_true = (Ptr_test_rng_true)R_GetCCallable("testRcppAttributePackage", "_testRcppAttributePackage_test_rng_true");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_test_rng_true(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List test_rng_true_signature(List x, bool verbose) {
        typedef SEXP(*Ptr_test_rng_true_signature)(SEXP,SEXP);
        static Ptr_test_rng_true_signature p_test_rng_true_signature = NULL;
        if (p_test_rng_true_signature == NULL) {
            validateSignature("List(*test_rng_true_signature)(List,bool)");
            p_test_rng_true_signature = (Ptr_test_rng_true_signature)R_GetCCallable("testRcppAttributePackage", "_testRcppAttributePackage_test_rng_true_signature");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_test_rng_true_signature(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List test_invisible_true_rng_true(List x, bool verbose) {
        typedef SEXP(*Ptr_test_invisible_true_rng_true)(SEXP,SEXP);
        static Ptr_test_invisible_true_rng_true p_test_invisible_true_rng_true = NULL;
        if (p_test_invisible_true_rng_true == NULL) {
            validateSignature("List(*test_invisible_true_rng_true)(List,bool)");
            p_test_invisible_true_rng_true = (Ptr_test_invisible_true_rng_true)R_GetCCallable("testRcppAttributePackage", "_testRcppAttributePackage_test_invisible_true_rng_true");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_test_invisible_true_rng_true(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List test_invisible_true(List x, bool verbose) {
        typedef SEXP(*Ptr_test_invisible_true)(SEXP,SEXP);
        static Ptr_test_invisible_true p_test_invisible_true = NULL;
        if (p_test_invisible_true == NULL) {
            validateSignature("List(*test_invisible_true)(List,bool)");
            p_test_invisible_true = (Ptr_test_invisible_true)R_GetCCallable("testRcppAttributePackage", "_testRcppAttributePackage_test_invisible_true");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_test_invisible_true(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List test_invisible_true_signature(List x, bool verbose) {
        typedef SEXP(*Ptr_test_invisible_true_signature)(SEXP,SEXP);
        static Ptr_test_invisible_true_signature p_test_invisible_true_signature = NULL;
        if (p_test_invisible_true_signature == NULL) {
            validateSignature("List(*test_invisible_true_signature)(List,bool)");
            p_test_invisible_true_signature = (Ptr_test_invisible_true_signature)R_GetCCallable("testRcppAttributePackage", "_testRcppAttributePackage_test_invisible_true_signature");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_test_invisible_true_signature(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

}

#endif // RCPP_testRcppAttributePackage_RCPPEXPORTS_H_GEN_
