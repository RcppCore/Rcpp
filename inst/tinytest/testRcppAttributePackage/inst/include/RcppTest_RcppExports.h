// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_RcppTest_RCPPEXPORTS_H_GEN_
#define RCPP_RcppTest_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace RcppTest {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("RcppTest", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("RcppTest", "_RcppTest_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in RcppTest");
            }
        }
    }

    inline int test_rng0(bool verbose) {
        typedef SEXP(*Ptr_test_rng0)(SEXP);
        static Ptr_test_rng0 p_test_rng0 = NULL;
        if (p_test_rng0 == NULL) {
            validateSignature("int(*test_rng0)(bool)");
            p_test_rng0 = (Ptr_test_rng0)R_GetCCallable("RcppTest", "_RcppTest_test_rng0");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_test_rng0(Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<int >(rcpp_result_gen);
    }

    inline void test1(bool verbose) {
        typedef SEXP(*Ptr_test1)(SEXP);
        static Ptr_test1 p_test1 = NULL;
        if (p_test1 == NULL) {
            validateSignature("void(*test1)(bool)");
            p_test1 = (Ptr_test1)R_GetCCallable("RcppTest", "_RcppTest_test1");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_test1(Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline int test2(List x) {
        typedef SEXP(*Ptr_test2)(SEXP);
        static Ptr_test2 p_test2 = NULL;
        if (p_test2 == NULL) {
            validateSignature("int(*test2)(List)");
            p_test2 = (Ptr_test2)R_GetCCallable("RcppTest", "_RcppTest_test2");
        }
        RObject rcpp_result_gen;
        {
            rcpp_result_gen = p_test2(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<int >(rcpp_result_gen);
    }

    inline int test3(List x, bool verbose) {
        typedef SEXP(*Ptr_test3)(SEXP,SEXP);
        static Ptr_test3 p_test3 = NULL;
        if (p_test3 == NULL) {
            validateSignature("int(*test3)(List,bool)");
            p_test3 = (Ptr_test3)R_GetCCallable("RcppTest", "_RcppTest_test3");
        }
        RObject rcpp_result_gen;
        {
            rcpp_result_gen = p_test3(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<int >(rcpp_result_gen);
    }

    inline int test_rng1(bool verbose) {
        typedef SEXP(*Ptr_test_rng1)(SEXP);
        static Ptr_test_rng1 p_test_rng1 = NULL;
        if (p_test_rng1 == NULL) {
            validateSignature("int(*test_rng1)(bool)");
            p_test_rng1 = (Ptr_test_rng1)R_GetCCallable("RcppTest", "_RcppTest_test_rng1");
        }
        RObject rcpp_result_gen;
        {
            rcpp_result_gen = p_test_rng1(Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<int >(rcpp_result_gen);
    }

    inline int test_rng2(bool verbose) {
        typedef SEXP(*Ptr_test_rng2)(SEXP);
        static Ptr_test_rng2 p_test_rng2 = NULL;
        if (p_test_rng2 == NULL) {
            validateSignature("int(*test_rng2)(bool)");
            p_test_rng2 = (Ptr_test_rng2)R_GetCCallable("RcppTest", "_RcppTest_test_rng2");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_test_rng2(Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<int >(rcpp_result_gen);
    }

    inline int test_rng3(bool verbose) {
        typedef SEXP(*Ptr_test_rng3)(SEXP);
        static Ptr_test_rng3 p_test_rng3 = NULL;
        if (p_test_rng3 == NULL) {
            validateSignature("int(*test_rng3)(bool)");
            p_test_rng3 = (Ptr_test_rng3)R_GetCCallable("RcppTest", "_RcppTest_test_rng3");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_test_rng3(Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<int >(rcpp_result_gen);
    }

    inline int test_invisible1(bool verbose) {
        typedef SEXP(*Ptr_test_invisible1)(SEXP);
        static Ptr_test_invisible1 p_test_invisible1 = NULL;
        if (p_test_invisible1 == NULL) {
            validateSignature("int(*test_invisible1)(bool)");
            p_test_invisible1 = (Ptr_test_invisible1)R_GetCCallable("RcppTest", "_RcppTest_test_invisible1");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_test_invisible1(Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<int >(rcpp_result_gen);
    }

    inline int test_invisible2(bool verbose) {
        typedef SEXP(*Ptr_test_invisible2)(SEXP);
        static Ptr_test_invisible2 p_test_invisible2 = NULL;
        if (p_test_invisible2 == NULL) {
            validateSignature("int(*test_invisible2)(bool)");
            p_test_invisible2 = (Ptr_test_invisible2)R_GetCCallable("RcppTest", "_RcppTest_test_invisible2");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_test_invisible2(Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<int >(rcpp_result_gen);
    }

    inline int test_invisible3(bool verbose) {
        typedef SEXP(*Ptr_test_invisible3)(SEXP);
        static Ptr_test_invisible3 p_test_invisible3 = NULL;
        if (p_test_invisible3 == NULL) {
            validateSignature("int(*test_invisible3)(bool)");
            p_test_invisible3 = (Ptr_test_invisible3)R_GetCCallable("RcppTest", "_RcppTest_test_invisible3");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_test_invisible3(Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<int >(rcpp_result_gen);
    }

}

#endif // RCPP_RcppTest_RCPPEXPORTS_H_GEN_
