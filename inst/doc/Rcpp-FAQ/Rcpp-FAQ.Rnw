\documentclass[10pt]{article}
%\VignetteIndexEntry{Rcpp-FAQ}
\usepackage{vmargin}
\setmargrb{0.75in}{0.75in}{0.75in}{0.75in}

\usepackage{color, alltt}
\usepackage[authoryear,round,longnamesfirst]{natbib}
\usepackage[colorlinks]{hyperref}
\definecolor{link}{rgb}{0,0,0.3}	%% next few lines courtesy of RJournal.sty
\hypersetup{
    colorlinks,%
    citecolor=link,%
    filecolor=link,%
    linkcolor=link,%
    urlcolor=link
}

\newcommand{\proglang}[1]{\textsf{#1}}
\newcommand{\pkg}[1]{{\fontseries{b}\selectfont #1}}

\author{Dirk Eddelbuettel \and Romain Fran\c{c}ois}
\title{Frequently Asked Questions about \pkg{Rcpp}}

<<echo=FALSE>>=
link <- function( f, package, text = f, root = "http://finzi.psych.upenn.edu/R/library/" ){
	h <- if( missing(package) ) {
		as.character( help( f ) )
	} else {
		as.character( help( f, package = paste( package, sep = "" ) ) )
	}
	if( ! length(h) ){
		sprintf( "\\\\textbf{%s}", f )
	} else {
		rx <- "^.*/([^/]*?)/help/(.*?)$"
		package <- sub( rx, "\\1", h, perl = TRUE )
		page <- sub( rx, "\\2", h, perl = TRUE )
		sprintf( "\\\\href{%s%s/html/%s.html}{\\\\texttt{%s}}", root, package, page, text )
	}
}
linkS4class <- function( cl, package, text = cl, root = "http://finzi.psych.upenn.edu/R/library/" ){
	link( sprintf("%s-class", cl), package, text, root )
}
require(inline)
# this will be integrated to package highlight later
ex_highlight <- function( file, external.highlight = TRUE, verbatim = FALSE ){
	if( verbatim ){
		writeLines( "\\begin{verbatim}" )
		writeLines( readLines( file ) )
		writeLines( "\\end{verbatim}" )
	} else {
		tf <- tempfile()
		if( external.highlight ){
			cmd <- sprintf( 'highlight --input="%s" --output="%s" -L --pretty-symbols', file, tf )
			tryCatch( {
				system( cmd )
				tex <- readLines( tf )
				keep <- seq( which( tex == "\\noindent" ), which( tex == "\\normalfont" ) )
				tex <- c(
					"\\vspace{1em}\\noindent\\fbox{\\begin{minipage}{0.9\\textwidth}" ,
					tex[ keep ],
					"\\end{minipage}}\\vspace{1em}" )
				writeLines( tex )
			})
		} else {
			r = renderer_latex( minipage = TRUE, doc = FALSE )
			tex <- highlight( file, renderer = r , output = NULL )
			writeLines( tex )
		}
	}
	invisible(NULL)
}

@

\newcommand{\faq}[1]{\textbf{FAQ~\ref{#1}}}

\begin{document}
\maketitle

\abstract{
  \noindent This document attempts to answer the most Frequently Asked
  Questions (FAQ) regarding the \pkg{Rcpp} \citep{CRAN:Rcpp} package.
}

\section{Getting started}

\subsection{How do I get started ?}

<<eval=FALSE>>=
vignette( "Rcpp-introduction" )
@

\section{Compiling and Linking}

\subsection{How do I use \pkg{Rcpp} in my package ?}
\label{make-package}

\pkg{Rcpp} has been specifically designed to be used by other packages.
Making a package that uses \pkg{Rcpp} depends on the same mechanics that are
involved in making any \proglang{R} package that use compiled code --- so
reading the \textsl{Writing R Extensions} manual \citep{R:exts} is a required
first step.

Further steps, specific to \pkg{Rcpp}, are described in a separate vignette.

<<eval=FALSE>>=
vignette( "Rcpp-package" )
@

\subsection{How do I quickly prototype my code ?}
\label{using-inline}

The \pkg{inline} package \citep{CRAN:inline} provides the functions
\Sexpr{link("cfunction")} and \Sexpr{link("cxxfunction")}. Below is a simple
function that uses \texttt{accumulate} from the (\proglang{C++}) Standard
Template Library to sum the elements of a numeric vector.

<<>>=
fx <- cxxfunction( signature( x = "numeric" ),
' NumericVector xx(x); return wrap( std::accumulate( xx.begin(), xx.end(), 0.0 ) ) ; '
, plugin = "Rcpp"
	)
res <- fx( seq( 1, 10, by = 0.5 ) )
res
<<echo=FALSE>>=
stopifnot( identical( res, sum( seq( 1, 10, by = 0.5 ) ) ) )
@

\pkg{Rcpp} uses \pkg{inline} to power its entire unit test suite. Consult the
\texttt{unitTests} directory of \pkg{Rcpp} for over five hundred further examples.

<<eval=FALSE>>=
list.files( system.file( "unitTests", package = "Rcpp" ), pattern = "^runit[.]" )
@

One might want to use code that lives in a \proglang{C++} file instead of writing
the code in a character string in R. This is easily achieved by using
\Sexpr{link("readLines")} :

<<eval=FALSE>>=
fx <- cxxfunction( signature(),
	paste( readLines( "myfile.cpp"), collapse = "\n" ),
	plugin = "Rcpp" )
@

The \texttt{verbose} argument of \Sexpr{link("cxxfunction")} is very
useful as it shows how \pkg{inline} runs the show.

\subsection{How do I convert my prototyped code to a package?}
\label{from-inline-to-package}

Since release 0.3.5 of \pkg{inline}, one can combine \faq{using-inline} and
\faq{make-package}. See \verb|help("package.skeleton-methods")| once
\pkg{inline} is loaded and use the skeleton-generating functionality to
transform a prototyped function into the minimal structure of a package.
After that you can proceed with working on the package in the spirit of
\faq{make-package}.

\subsection{But I want to compile my code with R CMD SHLIB}

The recommended way is to create a package and follow \faq{make-package}. The
alternate recommendation is to use \pkg{inline} and follow \faq{using-inline}
because it takes care of all the details.

However, some people have shown that they prefer not to follow recommended
guidelines and compile their code using the traditional \texttt{R CMD SHLIB}. To
do this, we need to help \texttt{SHLIB} and let it know about the header files
that \pkg{Rcpp} provides and the \proglang{C++} library the code must link
against.

<<lang=bash>>=
$ export PKG_LIBS=`Rscript -e "Rcpp:::LdFlags()"`
$ export PKG_CXXFLAGS=`Rscript -e "Rcpp:::CxxFlags()"`
$ R CMD SHLIB myfile.cpp
@

This approach corresponds to the very earliest ways of building programs and
can still be found in some deprecated documents (as \textit{e.g.} some of
Dirk's older 'Intro to HPC with R' tutorial slides).  It is still not
recommended as there are tools and automation mechanisms that can do the work
for you.


\subsection{What about \texttt{LinkingTo} ?}

\proglang{R} has only limited support for cross-package linkage.

We now employ the \texttt{LinkingTo} field of the \texttt{DESCRIPTION} file
of packages using \pkg{Rcpp}. But this only helps in having \proglang{R}
compute the location of the header files for us.

The actual library location and argument still needs to be provided by the
user. How to do so has been shown above, and we recommned you use either
\faq{make-package} or \faq{using-inline} both which use the \pkg{Rcpp}
function \texttt{Rcpp:::LdFlags()}.

If and when \texttt{LinkingTo} changes and lives up to its name, we will be
sure to adapt \pkg{Rcpp} as well.

\subsection{Does \pkg{Rcpp} work on windows}

Yes of course. See the Windows binaries provided by CRAN.


\subsection{Can I use \pkg{Rcpp} with Visual Studio}

Not a chance.

And that is not because we are meanies but because \proglang{R} and Visual
Studio simply do not get along. As \pkg{Rcpp} is all about extending
\proglang{R} with \proglang{C++} interfaces, we are bound by the available
toolchain.  And \proglang{R} simply does not compile with Visual Studio. Go
complain to its vendor if you are still upset.

\subsection{Does \pkg{Rcpp} work on solaris/suncc}

Yes. 

\subsection{Does \pkg{Rcpp} work with Revolution R}

We have not tested it yet. \pkg{Rcpp} might need a few tweaks to work
with the compilers used by Revolution R. 

\subsection{Is it related to CXXR}

CXXR is an ambitious project that aims to totally refactor the \proglang{R}
interpreter in \proglang{C++}. There are a few similaritites with \pkg{Rcpp}
but the projects are unrelated. 

CXXR and \pkg{Rcpp} both want \proglang{R} to make more use of \proglang{C++}
but they do it in very different ways. 

\section{API}

\subsection{Can I do matrix algebra with \pkg{Rcpp} ? }

\begin{quote}
  \emph{\pkg{Rcpp} allows element-wise operations on vector and matrices through
    operator overloading and STL interface, but what if I want to multiply a
    matrix by a vector, etc ...}
\end{quote}

\noindent Currently, \pkg{Rcpp} does not provide binary operators to allow operations
involving entire objects. Adding operators to \pkg{Rcpp} would be a major
project (if done right) involving advanced techniques such as expression
templates. We currently do not plan to go in this direction, but we would
welcome external help. Please send us a design document.

However, we have developed the \pkg{RcppArmadillo} package that provides a
bridge between \pkg{Rcpp} and \pkg{Armadillo} \citep{Armadillo}.  \pkg{Armadillo}
supports binary operators on its types in a way that takes full advantage of
expression templates to remove temporaries and allow chaining of
operations. That is a mouthful of words meaning that it makes the code go
faster by using fiendishly clever ways available via the so-called template
meta programming, an advanced \proglang{C++} technique.

The following example is adapted from the examples available at the project
page of Armadillo. It calculate $ x' \times Y^{-1} \times z$

<<echo=FALSE>>=
writeLines( '
    // copy the data to armadillo structures
    arma::colvec x = Rcpp::as<arma::colvec> (x_);
    arma::mat Y = Rcpp::as<arma::mat>( Y_ ) ;
    arma::colvec z = Rcpp::as<arma::colvec>( z_ ) ;

    // calculate the result
    double result = arma::as_scalar(
        arma::trans(x) * arma::inv(Y) * z
        );

    // return it to R
    return Rcpp::wrap( result );
', "myfile.cpp" )
@
<<echo=FALSE,results=tex>>=
ex_highlight( "myfile.cpp" )
@

<<>>=
fx <- cxxfunction(
	signature(x_ = "numeric", Y_ = "matrix", z_ = "numeric" ),
	paste( readLines( "myfile.cpp" ), collapse = "\n" ),
	plugin = "RcppArmadillo" )
fx( 1:4, diag( 4 ), 1:4 )
@
<<echo=FALSE>>=
unlink( "myfile.cpp" )
@

The focus is on the code \verb|arma::trans(x) * arma::inv(Y) * z|, which
performs the same operation as the R code \verb|t(x) %*% solve(Y) %*% z|,
although Armadillo turns it into only one operation, which makes it quite fast.
Armadillo benchmarks against other \proglang{C++} matrix algebra libraries
are provided on \href{http://arma.sourceforge.net/speed.html}{the Armadillo website}.

It should be noted that code below depends on the version \texttt{0.3.5} of
\pkg{inline} and the version \texttt{0.2.2} of \pkg{RcppArmadillo}

\subsection{Is the API documented ? }

You bet. We use \proglang{doxygen} to generate html, latex and man page
documentation from the source. The html documentation is available for
\href{http://dirk.eddelbuettel.com/code/rcpp/html/index.html}{browsing}, as a
\href{http://dirk.eddelbuettel.com/code/rcpp/Rcpp_refman.pdf}{very large pdf file},
and all three formats are also available a zip-archives:
\href{http://dirk.eddelbuettel.com/code/rcpp/rcpp-doc-html.zip}{html},
\href{http://dirk.eddelbuettel.com/code/rcpp/rcpp-doc-latex.zip}{latex}, and
\href{http://dirk.eddelbuettel.com/code/rcpp/rcpp-doc-man.zip}{man}.

\subsection{Does it really work ?}

We take quality seriously and have developped an extensive unit test suite to
cover many possible uses of the \pkg{Rcpp} API.

We are always on the look for more coverage in our testing. Please let us know
if something has not been tested enough.

\section{Support}

\subsection{Where can I ask further questions ?}

The
\href{https://lists.r-forge.r-project.org/cgi-bin/mailman/listinfo/rcpp-devel}{Rcpp-devel}
mailing list hosted at R-forge is by far the best place.  You may also want
to look at the list archives to see if your question has been asked before.

\subsection{I like it. How can I help ?}
\label{helping}

We maintain some feature request in the R-forge tracker in the \pkg{Rcpp}
project page. If you feel you want to draft code for these, we would be glad
to study patches and incorporate them in \pkg{Rcpp}.

You can also spread the word about \pkg{Rcpp}. There are many packages on CRAN
that use \proglang{C++}, yet are not using \pkg{Rcpp}. You could write a
review of \pkg{Rcpp} in \href{http://crantastic.org}{crantastic}, blog about
it or get the word out otherwise.

\subsection{I don't like it. How can I help ?}

It is very generous of you to still want to help. Perhaps you can tell us
what it is that you dislike. We are very open to \emph{constructive} criticism.

\subsection{Can I have commercial support for \pkg{Rcpp} ?}

Sure you can. Just send us an email, and we will be happy to discuss the
request..

\subsection{I want to learn quickly. Do you provide training courses.}

Yes. Just send us an email.


\bibliographystyle{abbrvnat}
\bibliography{Rcpp}

\end{document}

